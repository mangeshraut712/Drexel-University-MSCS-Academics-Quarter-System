JMP start_q				;jump to start_q labelinput_value: DB 27 			;input_value = int 6start_q:					;label start_q    		MOV A, [input_value] 	;Load Value    		PUSH A 		;Push A to stack pointer    		CALL multipleOfThree 	;Call Function    		POP A 			;Get Return Value    		ADD A, 48 		;Convert to ASCII    		MOV [232],A 		;Print    		HLT 			;stop the processmultipleOfThree: 			;multiple of three function label		PUSH A 		;Push A to stack		PUSH B 		;Push B to stack		MOV C, A 		;move A into C		MOV B, 3 		;move Int 3 into B register		DIV B 			;divide reg B		MUL B 			;multiply reg B		CMP C, A 		;compare A with C		JZ returnZero 		;Jump if Zero to returnZero label		JNZ returnOne 		;Jump if No Zero to to returnOne labelreturnZero:				;returnZero label		MOV [SP+4], 1 		; move 1 to SP+4 address 		POP B 			; POP B		POP A 			; POP A		RET 			;Return to functionreturnOne:				;returnOne label		MOV [SP+4], 0 		;Move 0 to SP+4 address		POP B 			;POP B		POP A 			;POP A		RET 			;Return to function