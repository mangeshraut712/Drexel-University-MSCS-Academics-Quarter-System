JMP start_q			;Jump to start_q labelinput_value: 	DB 99 		;input_value = int 99start_q:				;start_q label    		MOV A, [input_value] ;Load Value    		PUSH A 	;Push for Function Call    		CALL isOdd 	;Call Function    		POP A 		;Get Return Value    		ADD A, 48 	;Convert to ASCII    		MOV [232],A 	;Print    		HLT 		;stop processisOdd:				;isOdd function label		PUSH A 	;Push A to stack		PUSH B 	;Push B to stack		MOV B, 1 	;Move int 1 to B		AND A, B 	;Perform AND between A and B		CMP A, B 	;Compare A and B		JZ returnZero 	;Jump if Zero to returnZero label		JNZ returnOne 	;Jump if No Zero to to returnOne labelreturnZero:			;returnZero label		MOV [SP+4], 1 ; move 1 to SP+4 address 		POP B 		; POP B		POP A 		; POP A		RET 		;Return to functionreturnOne:			;returnOne label		MOV [SP+4], 0 ;Move 0 to SP+4 address		POP B 		;POP B		POP A 		;POP A		RET 		;Return to function