Mangesh RautQuestion 1a: AQuestion 1b: BQuestion 1c: CQuestion 1d: AQuestion 1e: CQuestion 2a: A Question 3a: CQuestion 3b: AQuestion 3c: BQuestion 3d: CQuestion 3e: AQuestion 4a: AQuestion 4b: CQuestion 4c: BQuestion 4d: AQuestion 4e: CQuestion 4f: AQuestion 5a: CQuestion 5b: BQuestion 5c: AQuestion 5d: AQuestion 5e: BQuestion 5f: CQuestion 6a: AQuestion 6b: AQuestion 6c: BQuestion 6d: AQuestion 6e: ACodeimport java.math.BigInteger;//import BigInteger math librarypublic class exponentTimings {//an ordering of the functions from fastest to slowest.	// Method 1: The Built In Exponent	static BigInteger x = new BigInteger("7"); // BigInteger x = 2	static BigInteger y = x.pow(21); // BigInteger y = power of x	// Method 2: myPow1	static BigInteger myPow1(BigInteger a, int b) { // myPow1 method		BigInteger total = new BigInteger("1"); // BigInteger total = 1		while (b > 0) { // while loop			total = total.multiply(a); // total *= a			b = b - 1; // integer b -=1		}		return total; // return total value	}	// Method 3: myPow2	static BigInteger myPow2(BigInteger a, int b) { // myPow2 method		if (b == 0) { // if condition to check b is 0 or not			BigInteger one = new BigInteger("1"); // BigInteger one = 1			return one; // return value one		}		if (b % 2 == 0) { // if condition to check even number			BigInteger temp = new BigInteger("0"); // BigInteger temp = 0			temp = myPow2(a, b / 2); // temp = myPow2(a, b/2)			return temp.multiply(temp); // return if condition value		} else { // else condition			return a.multiply(myPow2(a, b - 1)); // return else condition value		}	}	// Main Function	public static void main(String args[]) throws Exception {		System.out.println(System.nanoTime()); // collection of timing for build in library		long timeA = System.nanoTime(); // time A before function execution		System.out.println(y.toString()); // output of build in exponent		System.out.println(System.nanoTime()); // collection of timing for build in library		long timeB = System.nanoTime(); // time B after function execution		System.out.println(timeB - timeA); // difference of time A and B		BigInteger a = new BigInteger("7"); // Value of BigInteger is 7 which is base		int b = 21; // Value of integer b is 21 which is power		System.out.println(System.nanoTime()); // collection of timing for myPow1		long timeC = System.nanoTime(); // time C before function execution		System.out.println(myPow1(a, b)); // output of method 1		System.out.println(System.nanoTime()); // collection of timing for myPow1		long timeD = System.nanoTime(); // time D before function execution		System.out.println(timeD - timeC); // difference of time C and D		System.out.println(System.nanoTime()); // collection of timing for myPow2		long timeE = System.nanoTime(); // time E before function execution		System.out.println(myPow2(a, b)); // output of method 2		System.out.println(System.nanoTime()); // collection of timing for myPow2		long timeF = System.nanoTime(); // time F before function execution		System.out.println(timeF - timeE); // difference of time E and FOutput41251417667500 	before timing558545864083284007 	output of build in library41251419471375 	after timing834709 			difference of timing before and after41251419498083		before timing558545864083284007	output of myPow141251419556541		after timing67459			difference of timing before and after41251419581666		before timing558545864083284007	output of mypow241251419627583		after timing46167			difference of timing before and after